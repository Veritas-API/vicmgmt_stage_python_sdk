# coding: utf-8

"""
    Veritas Information Classifier (VIC)

    APIs

    OpenAPI spec version: Resource Specific
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Policy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, links=None, id=None, name=None, description=None, enabled=None, categories=None, tags=None, body=None, engine_body=None, custom=None):
        """
        Policy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'links': 'list[Link]',
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'enabled': 'bool',
            'categories': 'list[str]',
            'tags': 'list[str]',
            'body': 'PolicyBody',
            'engine_body': 'str',
            'custom': 'bool'
        }

        self.attribute_map = {
            'links': 'links',
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'enabled': 'enabled',
            'categories': 'categories',
            'tags': 'tags',
            'body': 'body',
            'engine_body': 'engineBody',
            'custom': 'custom'
        }

        self._links = links
        self._id = id
        self._name = name
        self._description = description
        self._enabled = enabled
        self._categories = categories
        self._tags = tags
        self._body = body
        self._engine_body = engine_body
        self._custom = custom

    @property
    def links(self):
        """
        Gets the links of this Policy.

        :return: The links of this Policy.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this Policy.

        :param links: The links of this Policy.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this Policy.

        :return: The id of this Policy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Policy.

        :param id: The id of this Policy.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Policy.
        Display name

        :return: The name of this Policy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Policy.
        Display name

        :param name: The name of this Policy.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Policy.

        :return: The description of this Policy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Policy.

        :param description: The description of this Policy.
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """
        Gets the enabled of this Policy.
        If true, the policy is active for the tenant and will be used for document classification.

        :return: The enabled of this Policy.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this Policy.
        If true, the policy is active for the tenant and will be used for document classification.

        :param enabled: The enabled of this Policy.
        :type: bool
        """

        self._enabled = enabled

    @property
    def categories(self):
        """
        Gets the categories of this Policy.
        A list of categories that the policy falls into.  Categories may be hierarchical, e.g. industry/medical

        :return: The categories of this Policy.
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this Policy.
        A list of categories that the policy falls into.  Categories may be hierarchical, e.g. industry/medical

        :param categories: The categories of this Policy.
        :type: list[str]
        """

        self._categories = categories

    @property
    def tags(self):
        """
        Gets the tags of this Policy.
        The tags returned from a classification operation when the policy matches a document.

        :return: The tags of this Policy.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Policy.
        The tags returned from a classification operation when the policy matches a document.

        :param tags: The tags of this Policy.
        :type: list[str]
        """

        self._tags = tags

    @property
    def body(self):
        """
        Gets the body of this Policy.
        Policy body that defines how rules are used to enforce the policy.

        :return: The body of this Policy.
        :rtype: PolicyBody
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this Policy.
        Policy body that defines how rules are used to enforce the policy.

        :param body: The body of this Policy.
        :type: PolicyBody
        """

        self._body = body

    @property
    def engine_body(self):
        """
        Gets the engine_body of this Policy.
        Policy body in its raw engine-specific form. May be empty for custom policies.

        :return: The engine_body of this Policy.
        :rtype: str
        """
        return self._engine_body

    @engine_body.setter
    def engine_body(self, engine_body):
        """
        Sets the engine_body of this Policy.
        Policy body in its raw engine-specific form. May be empty for custom policies.

        :param engine_body: The engine_body of this Policy.
        :type: str
        """

        self._engine_body = engine_body

    @property
    def custom(self):
        """
        Gets the custom of this Policy.
        If true the policy is a custom policy defined by a user.  If false, the policy is a standard built-in policy.

        :return: The custom of this Policy.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """
        Sets the custom of this Policy.
        If true the policy is a custom policy defined by a user.  If false, the policy is a standard built-in policy.

        :param custom: The custom of this Policy.
        :type: bool
        """

        self._custom = custom

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
