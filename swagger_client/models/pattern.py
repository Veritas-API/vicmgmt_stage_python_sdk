# coding: utf-8

"""
    Veritas Information Classifier (VIC)

    APIs

    OpenAPI spec version: Resource Specific
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Pattern(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, links=None, id=None, name=None, description=None, value=None, type=None, case_sensitive=None, custom=None):
        """
        Pattern - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'links': 'list[Link]',
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'value': 'str',
            'type': 'str',
            'case_sensitive': 'bool',
            'custom': 'bool'
        }

        self.attribute_map = {
            'links': 'links',
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'value': 'value',
            'type': 'type',
            'case_sensitive': 'caseSensitive',
            'custom': 'custom'
        }

        self._links = links
        self._id = id
        self._name = name
        self._description = description
        self._value = value
        self._type = type
        self._case_sensitive = case_sensitive
        self._custom = custom

    @property
    def links(self):
        """
        Gets the links of this Pattern.

        :return: The links of this Pattern.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this Pattern.

        :param links: The links of this Pattern.
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this Pattern.

        :return: The id of this Pattern.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Pattern.

        :param id: The id of this Pattern.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Pattern.
        Display name

        :return: The name of this Pattern.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Pattern.
        Display name

        :param name: The name of this Pattern.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Pattern.

        :return: The description of this Pattern.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Pattern.

        :param description: The description of this Pattern.
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """
        Gets the value of this Pattern.
        The pattern to match on. For type Regex, the value is a regular expression. For type Keyword, the value is a list of keywords (LF-delimited).  Not relevant for type Pattern.

        :return: The value of this Pattern.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this Pattern.
        The pattern to match on. For type Regex, the value is a regular expression. For type Keyword, the value is a list of keywords (LF-delimited).  Not relevant for type Pattern.

        :param value: The value of this Pattern.
        :type: str
        """

        self._value = value

    @property
    def type(self):
        """
        Gets the type of this Pattern.

        :return: The type of this Pattern.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Pattern.

        :param type: The type of this Pattern.
        :type: str
        """
        allowed_values = ["BuiltIn", "Keyword", "Regex"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def case_sensitive(self):
        """
        Gets the case_sensitive of this Pattern.

        :return: The case_sensitive of this Pattern.
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """
        Sets the case_sensitive of this Pattern.

        :param case_sensitive: The case_sensitive of this Pattern.
        :type: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def custom(self):
        """
        Gets the custom of this Pattern.

        :return: The custom of this Pattern.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """
        Sets the custom of this Pattern.

        :param custom: The custom of this Pattern.
        :type: bool
        """

        self._custom = custom

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Pattern):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
