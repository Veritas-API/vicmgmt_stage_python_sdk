# coding: utf-8

"""
    Veritas Information Classifier (VIC)

    APIs

    OpenAPI spec version: Resource Specific
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OperatorNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, operator=None, min=None, min_overridden=None, proximity=None, proximity_mode=None, early_out=None, children=None):
        """
        OperatorNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'operator': 'str',
            'min': 'int',
            'min_overridden': 'bool',
            'proximity': 'int',
            'proximity_mode': 'str',
            'early_out': 'bool',
            'children': 'list[Node]'
        }

        self.attribute_map = {
            'type': 'type',
            'operator': 'operator',
            'min': 'min',
            'min_overridden': 'minOverridden',
            'proximity': 'proximity',
            'proximity_mode': 'proximityMode',
            'early_out': 'earlyOut',
            'children': 'children'
        }

        self._type = type
        self._operator = operator
        self._min = min
        self._min_overridden = min_overridden
        self._proximity = proximity
        self._proximity_mode = proximity_mode
        self._early_out = early_out
        self._children = children

    @property
    def type(self):
        """
        Gets the type of this OperatorNode.
        Determines whether this node is a condition node or an operator node. NOTE: If ConditionNode & OperatorNode are not visible in the Swagger UI, please consult the Swagger json for details.

        :return: The type of this OperatorNode.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this OperatorNode.
        Determines whether this node is a condition node or an operator node. NOTE: If ConditionNode & OperatorNode are not visible in the Swagger UI, please consult the Swagger json for details.

        :param type: The type of this OperatorNode.
        :type: str
        """
        allowed_values = ["condition", "operator"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def operator(self):
        """
        Gets the operator of this OperatorNode.

        :return: The operator of this OperatorNode.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this OperatorNode.

        :param operator: The operator of this OperatorNode.
        :type: str
        """
        allowed_values = ["AND", "OR", "NOT"]
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def min(self):
        """
        Gets the min of this OperatorNode.
        The minimum number of child nodes that must match.  Only applies if the operator is OR.

        :return: The min of this OperatorNode.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this OperatorNode.
        The minimum number of child nodes that must match.  Only applies if the operator is OR.

        :param min: The min of this OperatorNode.
        :type: int
        """

        self._min = min

    @property
    def min_overridden(self):
        """
        Gets the min_overridden of this OperatorNode.

        :return: The min_overridden of this OperatorNode.
        :rtype: bool
        """
        return self._min_overridden

    @min_overridden.setter
    def min_overridden(self, min_overridden):
        """
        Sets the min_overridden of this OperatorNode.

        :param min_overridden: The min_overridden of this OperatorNode.
        :type: bool
        """

        self._min_overridden = min_overridden

    @property
    def proximity(self):
        """
        Gets the proximity of this OperatorNode.
        Optional proximity of the first child condition to the other child conditions.  If specified, the operator must be AND, and the child nodes must all be conditions (no operators).  There must be at least two child conditions and they must all be keyword or regex.  The child conditions must not have a minCount greater than 1, and must apply to the full content (not metadata fields).

        :return: The proximity of this OperatorNode.
        :rtype: int
        """
        return self._proximity

    @proximity.setter
    def proximity(self, proximity):
        """
        Sets the proximity of this OperatorNode.
        Optional proximity of the first child condition to the other child conditions.  If specified, the operator must be AND, and the child nodes must all be conditions (no operators).  There must be at least two child conditions and they must all be keyword or regex.  The child conditions must not have a minCount greater than 1, and must apply to the full content (not metadata fields).

        :param proximity: The proximity of this OperatorNode.
        :type: int
        """

        self._proximity = proximity

    @property
    def proximity_mode(self):
        """
        Gets the proximity_mode of this OperatorNode.

        :return: The proximity_mode of this OperatorNode.
        :rtype: str
        """
        return self._proximity_mode

    @proximity_mode.setter
    def proximity_mode(self, proximity_mode):
        """
        Sets the proximity_mode of this OperatorNode.

        :param proximity_mode: The proximity_mode of this OperatorNode.
        :type: str
        """
        allowed_values = ["FromFirstCondition", "SlidingWindow"]
        if proximity_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `proximity_mode` ({0}), must be one of {1}"
                .format(proximity_mode, allowed_values)
            )

        self._proximity_mode = proximity_mode

    @property
    def early_out(self):
        """
        Gets the early_out of this OperatorNode.

        :return: The early_out of this OperatorNode.
        :rtype: bool
        """
        return self._early_out

    @early_out.setter
    def early_out(self, early_out):
        """
        Sets the early_out of this OperatorNode.

        :param early_out: The early_out of this OperatorNode.
        :type: bool
        """

        self._early_out = early_out

    @property
    def children(self):
        """
        Gets the children of this OperatorNode.

        :return: The children of this OperatorNode.
        :rtype: list[Node]
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this OperatorNode.

        :param children: The children of this OperatorNode.
        :type: list[Node]
        """

        self._children = children

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OperatorNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
